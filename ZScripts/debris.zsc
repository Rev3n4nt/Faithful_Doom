class DebrisGeneral : Actor abstract
{
int sfxtype; //0 = debris, 1 = flames/smoke, 2 = blood, 3 = gibs
property sfxtype : sfxtype;
Default {
	DebrisGeneral.sfxtype 0;
	+NOTARGETSWITCH		//so that gibs pushed by explosions don't switch their target field to player
	+ROLLSPRITE
	+BLOODLESSIMPACT	//for debris that can bump into actors
	+FIXMAPTHINGPOS		//not sure it even does anything, hence the override
	+NOTAUTOAIMED
	+MISSILE			//enters Death when it hits the floor
	+NOBLOCKMAP
	+NOGRAVITY
	+DROPOFF
	+NOTELEPORT
	+FORCEXYBILLBOARD
	renderstyle "Translucent";
	alpha 1.0;
	radius 1;
	height 1;
	mass 1;
	damage 0;
	}
// thanks Gutawer for explaning the math and helping this function come to life
virtual void FlyBack() {
	if (!target)
		return;
	bFLATSPRITE = false;
	bNOGRAVITY = false;
	bNOINTERACTION = false;
	bRELATIVETOFLOOR = false;
	bTHRUACTORS = true;
	gravity = 1.0;
	A_FaceTarget();
	
	double dist = Distance2D(target);							//horizontal distance to target
	double vdisp = target.pos.z - pos.z + frandom(8,32);		//height difference between gib and target + randomized height
	double ftime = 20;											//time of flight
	
	double vvel = (vdisp + 0.5 * ftime*ftime) / ftime;
	double hvel = dist / ftime;
	
	Thrust(hvel,angle);
	vel.z = vvel;
	}
virtual void CheckTargetRaise() {}
	
override void PostBeginPlay()
	{
	if (!level.IsPointInMap(pos))
		self.destroy();
	super.PostBeginPlay();
	}
override void Tick()
	{
	if ((sfxtype == 0 && fdoom_debris == 0))
		{
		A_DeQueueCorpse();
		self.destroy();
		}
	super.Tick();
	}
}

// #include TOKENS.txt
// //MISC
// #include PUFF.txt
// #include AMMO.txt

// //Guns Guns Guns
// #include DEFAULTWEAPON.txt
// //here also all guns
// #include TRACERS.txt

// //Player Classes
// #include PLAYER.txt
// #include MARINES.txt
// #include Footsteps.txt
// #include ClassicWeapons.txt