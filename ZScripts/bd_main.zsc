////////////////////////////////////////////////////////////;
////////////// ALL BASIC BEAUTIFUL DOOM OBJECTS ////////////;
////////////////////////////////////////////////////////////

//base class for most debris
class DebrisGeneral : Actor abstract
{
int sfxtype; //0 = debris, 1 = flames/smoke, 2 = blood, 3 = gibs
property sfxtype : sfxtype;
Default {
	DebrisGeneral.sfxtype 0;
	+NOTARGETSWITCH		//so that gibs pushed by explosions don't switch their target field to player
	+ROLLSPRITE
	+BLOODLESSIMPACT	//for debris that can bump into actors
	+FIXMAPTHINGPOS		//not sure it even does anything, hence the override
	+NOTAUTOAIMED
	+MISSILE			//enters Death when it hits the floor
	+NOBLOCKMAP
	+MOVEWITHSECTOR
	+RELATIVETOFLOOR
	+NOGRAVITY
	+DROPOFF
	+NOTELEPORT
	+FORCEXYBILLBOARD
	+THRUACTORS
	+FLOORCLIP
	-ALLOWPARTICLES
	renderstyle "Translucent";
	alpha 1.0;
	radius 1;
	height 1;
	mass 1;
	damage 0;
	}
// thanks Gutawer for explaning the math and helping this function come to life
virtual void FlyBack() {
	if (!target)
		return;
	bFLATSPRITE = false;
	bNOGRAVITY = false;
	bNOINTERACTION = false;
	bRELATIVETOFLOOR = false;
	bTHRUACTORS = true;
	gravity = 1.0;
	A_FaceTarget();
	
	double dist = Distance2D(target);							//horizontal distance to target
	double vdisp = target.pos.z - pos.z + frandom(8,32);		//height difference between gib and target + randomized height
	double ftime = 20;											//time of flight
	
	double vvel = (vdisp + 0.5 * ftime*ftime) / ftime;
	double hvel = dist / ftime;
	
	Thrust(hvel,angle);
	vel.z = vvel;
	}
virtual void CheckTargetRaise() {}
	
override void PostBeginPlay()
	{
	if (!level.IsPointInMap(pos))
		self.destroy();
	super.PostBeginPlay();
	}
override void Tick()
	{
	if ((sfxtype == 0 && fdoom_debris == 0))
		{
		A_DeQueueCorpse();
		self.destroy();
		}
	super.Tick();
	}
}

//for backwards compatibility, will be removed after full transition to zscript
class DummyChecker : Inventory
{
Default {
	+INVENTORY.UNDROPPABLE 
	+INVENTORY.UNTOSSABLE
	-COUNTITEM
	-INVENTORY.INVBAR
	+INVENTORY.PERSISTENTPOWER
	inventory.amount 1;
	inventory.maxamount 9999;
	}
}

//fake bullet that ricochets from bulletpuffs
Class RicochetBullet : DebrisGeneral
{
Default {
	+NOINTERACTION
	//+THRUACTORS
	//+DONTSPLASH
	//bouncetype "Hexen";
	speed 40;
	seesound "none";
	deathsound "none";
	renderstyle "Add";
	alpha 0.8;
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			//if (bdoom_sparks == 1)
				//A_PlaySound("weapons/ricochet");
			}
		PUFF A 2;
		stop;
	}
}

// Puffs

Class BdoomPuff : Actor abstract
{
Default {
	+NOBLOCKMAP
	+NOGRAVITY
	+FORCEXYBILLBOARD
	-ALLOWPARTICLES
	+DONTSPLASH
	-FLOORCLIP
	}
}

Class FBulletPuff : BDoomPuff
{
//int hitangle;
string hittex;
string dtype;
int rchance;
bool debris;
int  smoke; //0 - none, 1 - directional, 2 - radial along the wall
int sparkchance;
string decaltype;
Default {
	+NOINTERACTION
	+PUFFGETSOWNER
	decal "none";
	renderstyle "Add";
	scale 0.075;
	alpha 0.8;
	mass 1;
	height 1;
	radius 1;
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (target)
				angle = target.angle;
			int tracepitch;
			int traceheight;
			if (pos.z <= floorz+8) {
				tracepitch = 90;
				traceheight = floorz+8;
				}
			else if (pos.z >= ceilingz-8) {
				tracepitch = -90;
				traceheight = ceilingz-8;
				}
			else {
				tracepitch = 0;
				traceheight = pos.z;
				}
			FLineTraceData puffdata;
			LineTrace(angle,10,tracepitch,TRF_THRUACTORS|TRF_NOSKY|TRF_ABSPOSITION,traceheight,pos.x,pos.y,puffdata);	
			if (puffdata.HitType == TRACE_HitFloor)
				hittex = texman.GetName(floorpic);
			else if (puffdata.HitType == TRACE_HitCeiling)
				hittex = texman.GetName(ceilingpic);
			else if (puffdata.HitType == TRACE_HitWall) {
				hittex = texman.GetName(puffdata.HitTexture);
				}
			if (pos.z > floorz+8 && pos.z < ceilingz-8)
				A_SprayDecal(decaltype,8);
			if (fdoom_debris == 1) {
				if (random(0,100) < rchance)
					A_SpawnProjectile("RicochetBullet",0,0,random(0,359),CMF_AIMDIRECTION,random(-45,45));
				if (random(0,100) < sparkchance) {
					for (int i = 0; i <= 6; i++)
						A_SpawnItemEx("RicochetBullet",	0,0,0,	frandom(-1.5,1.5),	frandom(-1.5,1.5),	frandom(1,4),		0,				0,				72);
					}
				}
			//Console.PrintF("z %d, wallangle %d, %s - %s",traceheight,hitangle,hittex,dtype);
			}
		BPUF ABCD 1 bright;
		stop;
	}
}