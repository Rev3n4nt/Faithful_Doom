Class DeathTimeFreezer : PowerTimeFreezer 
{
  Default
  {
//  Inventory.MaxAmount 0;
//  Powerup.Type "PowerTimeFreezer";
  Powerup.Duration -9999;
  +INVENTORY.AUTOACTIVATE
  }
  
	override void InitEffect()
	{
		int freezemask;

		Super.InitEffect();

		if (Owner == null || Owner.player == null)
			return;

		// When this powerup is in effect, pause the music.
		S_PauseSound(false, false);
		S_ResumeSound(false); // Dirty Hack 
		// Give the player and his teammates the power to move when time is frozen.
		freezemask = 1 << Owner.PlayerNumber();
		Owner.player.timefreezer |= freezemask;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] &&
				players[i].mo != null &&
				players[i].mo.IsTeammate(Owner)
			   )
			{
				players[i].timefreezer |= freezemask;
			}
		}

		// [RH] The effect ends one tic after the counter hits zero, so make
		// sure we start at an odd count.
		EffectTics += !(EffectTics & 1);
		if ((EffectTics & 1) == 0)
		{
			EffectTics++;
		}
		// Make sure the effect starts and ends on an even tic.
		if ((level.time & 1) == 0)
		{
			level.frozen = true;;
		}
		else
		{
			// Compensate for skipped tic, but beware of overflow.
			if(EffectTics < 0x7fffffff)
				EffectTics++;
		}
	}  
  
  States
  {
  Spawn:
    MEGA ABCD 4 bright;
    Loop;
  }
}

class PowerTimeFreezerSound : PowerTimeFreezer
{
	override void InitEffect()
	{
		int freezemask;

		Powerup.InitEffect();

		if (Owner == null || Owner.player == null)
			return;

		// When this powerup is in effect, pause the music.
		S_PauseSound(False, False);

		// When this powerup is in effect, pause the music.
		//S_PauseSound(false, true);

		// Give the player and his teammates the power to move when time is frozen.
		freezemask = 1 << Owner.PlayerNumber();
		Owner.player.timefreezer |= freezemask;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] &&
				players[i].mo != null &&
				players[i].mo.IsTeammate(Owner)
			   )
			{
				players[i].timefreezer |= freezemask;
			}
		}

		// [RH] The effect ends one tic after the counter hits zero, so make
		// sure we start at an odd count.
		EffectTics += !(EffectTics & 1);
		if ((EffectTics & 1) == 0)
		{
			EffectTics++;
		}
		// Make sure the effect starts and ends on an even tic.
		if ((level.time & 1) == 0)
		{
			level.frozen = true;;
		}
		else
		{
			// Compensate for skipped tic, but beware of overflow.
			if(EffectTics < 0x7fffffff)
				EffectTics++;
		}
	}

	override void EndEffect()
	{
		Powerup.EndEffect();

		// If there is an owner, remove the timefreeze flag corresponding to
		// her from all players.
		if (Owner != null && Owner.player != null)
		{
			int freezemask = ~(1 << Owner.PlayerNumber());
			for (int i = 0; i < MAXPLAYERS; ++i)
			{
				players[i].timefreezer &= freezemask;
			}
		}

		// Are there any players who still have timefreezer bits set?
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (playeringame[i] && players[i].timefreezer != 0)
			{
				return;
			}
		}

		// No, so allow other actors to move about freely once again.
		level.frozen = false;

		// Also, turn the music back on.
		S_ResumeSound(true);
	}
}

class BEPowerTorch : PowerTorch
{
	override void InitEffect()
	{
//		Shader.SetEnabled(Owner.player, "NightVisionShader", true);
		Super.InitEffect();
	}
	
	override void EndEffect()
	{
//		Shader.SetEnabled(Owner.player, "NightVisionShader", false);
		Super.EndEffect();
	}
	
}
/*
//Based on Major Cookie version(Unused in D4D)
Class FallingHands : Weapon
{
	int user_veloz;
	int user_velooz;
	Default 
	{
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.NOAUTOFIRE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+WEAPON.NOALERT 
		+WEAPON.NO_AUTO_SWITCH
		weapon.selectionorder 9999;
	}

	action void A_DoubleRaise() {
		A_Raise();
		A_Raise();
	}	
	
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	Select:
		TNT1 A 0 A_DoubleRaise;
		Loop;
	Deselect:	
		TNT1 A 1
		{
			SetPlayerProperty(0,0,4);
			let player = BEDoomer(invoker.owner);
			if (player) A_SelectWeapon(player.lastWeapon);
		}
		
	DesLoop:
		TNT1 A 0 A_Lower;
		Loop;
	Ready:
		TNT1 A 1 A_JumpIf(pos.z == floorz, "Impact");
		Loop;
	Impact:
		TNT1 A 0 
		{
			let player = BEDoomer(invoker.owner);
			if (player) player.fallingPitch = false;
			A_Stop();
			SetPlayerProperty(0,1,4);
			if(pitch < 80) { A_SetPitch(80, SPF_INTERPOLATE); }
			A_Log("Impact Compensation.");
		//	A_PlaySound("HandFallSnd",7); // placeholder sound
			A_Overlay(50,"Visuals");
		}
		TNT1 A 25;
		TNT1 ABCDEFGH 1 A_SetPitch(pitch * 97 / 100 - frandom(0.1,1.0), SPF_INTERPOLATE);
		TNT1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_SetPitch(pitch * 95 / 100 - frandom(0.5,1.5), SPF_INTERPOLATE);
		TNT1 ABCDEFGH 1 A_SetPitch(pitch * 90 / 100 - frandom(0.1,1.0), SPF_INTERPOLATE);
		TNT1 A 0 A_WeaponReady;
		Goto Deselect;
	Visuals:
		GRTH L 25;
		GRTH KIHN 8; // placeholder hands animation		
		Stop;
	Fire:
		TNT1 A 0 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	}
}
*/
