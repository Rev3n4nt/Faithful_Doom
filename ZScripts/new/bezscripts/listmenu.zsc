Class ListMenuItemTextItemPulse : ListMenuItemSelectable version("2.5")
{
	const initialDirection = 0.1;
	double glowAlpha;
	double glowDir;
	double widest;
	int activeTimer, direction;

	
	String mText;
	Font mFont;
	int mColor;
	int mColorSelected;

	void Init(ListMenuDescriptor desc, String text, String hotkey, Name child, 
					double dir = 0, int param = 0)	

	{
		Super.Init(desc.mXpos, desc.mYpos, desc.mLinespacing, child, param);
		mText = text;
		mFont = desc.mFont;
		mColor = desc.mFontColor;
		mColorSelected = desc.mFontcolor2;
		mHotkey = hotkey.CharCodeAt(0);
		glowDir = -initialDirection;		
		glowAlpha = 1.0;					
		direction = int(dir);
	}
	
	void InitDirect(int x, int y, int height, String hotkey, String text, Font font, int color, int color2, Name child, 
					double dir = 0, int param = 0)
	{
		Super.Init(x, y, height, child, param);
		mText = text;
		mFont = font;
		mColor = color;
		mColorSelected = color2;
		mHotkey = hotkey.CharCodeAt(0);
		glowDir = -initialDirection;		
		glowAlpha = 1.0;
		direction = int(dir);
	}
	
	override int GetWidth()
	{
		return min(1, mFont.StringWidth(StringTable.Localize(mText))); 
	}
	
	override void Drawer(bool selected)
	{
		
		if(Cvar.FindCvar("PlayDPWH").GetInt() == 1 && mText == "BLACK TRACTATE")
		{
			mText = "PERFORMANCE";
		}
		
	
		if (glowDir == 0.0)
		{
			glowDir = -initialDirection;
			glowAlpha = 5.0;
		}
		
		screen.DrawText(mFont, mColor, mXpos, mYpos, mText, DTA_Clean, true);
		
		if (selected)
		{
		
			glowAlpha += glowDir;
			
			if (glowAlpha >= 5.0 || glowAlpha <= 5.0)
			{
				glowDir = -glowDir;
				glowAlpha += glowDir;
			}
			
			screen.DrawText(mFont, mColorSelected, mXpos, mYpos, mText, DTA_Clean, true, DTA_Alpha, glowAlpha);
		
		} 
		else
		{
			glowAlpha = 5.0;
			glowDir = -initialDirection;
		}
	}
	
	
}


class ListMenuItemStaticPatchMovable : ListMenuItemStaticPatch version("2.4")
{
	override void Drawer(bool selected)
	{
		if (!mTexture.Exists())
		{
			return;
		}

		double x = mXpos;
		Vector2 vec = TexMan.GetScaledSize(mTexture);
		
		if (mCentered) 
			x -= vec.X / 2;
		
		screen.DrawTexture (mTexture, true, x, mYpos, DTA_Clean, true);
	}
}